[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Duck",
    "section": "",
    "text": "A site about duck, R and other things\nmy blog\n\n\n\nReuseCC BY 4.0"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Je ne suis pas statisticien mais en tant que bon geek j’aime bien fouiller dans les entrailles de duckdb et de R.\nAprès avoir produit un certain nombre de snippets dans différents gitlab, j’essaye de centraliser mes notes (plus ou moins) en vrac sur ce site. Aucune garantie de régularité, (à priori) pas de longs posts à la mode des années 2000/2010 mais plutôt un micro-blogging quand je trouverais des sujets intéressants.\n\n\n\nReuseCC BY 4.0"
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "Notes en vrac",
    "section": "",
    "text": "Comparer des performances DuckDB/arrow\n\n\n\n\n\n\ntimemoir\n\n\nbenchmark\n\n\n\nComment évaluer la mémoire et le CPU de traitements long en duckdb/arrow\n\n\n\n\n\nJul 10, 2025\n\n\nNicolas Chuche\n\n\n\n\n\n\n\n\n\n\n\n\nde duckdb à st_to_sf\n\n\n\n\n\n\nduckdb\n\n\narrow\n\n\nsf\n\n\ngeoarrow\n\n\n\nComment convertir une extraction de duckdb en objet sf\n\n\n\n\n\nJul 10, 2025\n\n\nNicolas Chuche\n\n\n\n\n\n\n\n\n\n\n\n\nto arrow bad/duckplyr good\n\n\n\n\n\n\nduckdb\n\n\narrow\n\n\n\ncomment utiliser arrow::to_arrow est une très mauvaise idée avec dplyr::tbl\n\n\n\n\n\nJul 10, 2025\n\n\nNicolas Chuche\n\n\n\n\n\n\nNo matching items\n\nReuseCC BY 4.0"
  },
  {
    "objectID": "posts/2025-07-10-to_arrow_bad/index.html",
    "href": "posts/2025-07-10-to_arrow_bad/index.html",
    "title": "to arrow bad/duckplyr good",
    "section": "",
    "text": "Une syntaxe souvent recommandée pour écrire un fichier parquet après des ordres dplyr::tbl est d’utiliser arrow::to_arrow avec arrow::write_dataset ou arrow::write_parquet :\n\ntbl(con, \"read_parquet('geo.parquet')\") |&gt;\n  ...\n  arrow::to_arrow() |&gt;\n  arrow::write_dataset(\"mon_dataset\")\n\nCette syntaxe fonctionne toujours mais le nouveau package duckplyr est beaucoup plus efficace :\n\ncon &lt;- dbConnect(duckdb())\n\ntbl(con, \"read_parquet('geo.parquet')\") |&gt;\n  ...\n  duckplyr::as_duckdb_tibble() |&gt;\n  duckplyr::compute_parquet(\"my_tbl.parquet\")\n\n\nUne comparaison rapide\nVoici les résultats de tests de différentes façons de faire classiques (et le code pour les relancer chez vous ci-dessous) :\n\nwith_arrow : la méthode utilisant arrow\nwith_duckplyr : la méthode utilisant duckplyr\nwith_copy_to : la méthode utilisant le COPY ... TO ... de duckdb à titre de comparaison\n\n\n\nMontrez moi le code du benchmark\nlibrary(duckdb)\nlibrary(dplyr)\nlibrary(arrow)\n# pour afficher\nlibrary(kableExtra)\n# un outil de benchmark\nlibrary(timemoir)\n\nif (!file.exists(\"geo.parquet\")) {\n  download.file(\"https://static.data.gouv.fr/resources/sirene-geolocalise-parquet/20240107-143656/sirene2024-geo.parquet\", \"geo.parquet\")\n}\n\n# la version full duckdb\nwith_copy_to &lt;- function() {\n  con &lt;- dbConnect(duckdb())\n  on.exit(dbDisconnect(con, shutdown = TRUE))\n  \n  dbExecute(con, \"COPY (FROM read_parquet('geo.parquet')) TO 'test.parquet' (FORMAT PARQUET, COMPRESSION ZSTD)\")\n}\n\n# La version `\"historique\" avec `arrow` :\nwith_arrow &lt;- function() {\n  con &lt;- dbConnect(duckdb())\n  on.exit(dbDisconnect(con, shutdown = TRUE))\n\n  tbl(con, \"read_parquet('geo.parquet')\") |&gt;\n    arrow::to_arrow() |&gt;\n    arrow::write_dataset('test', compression='zstd')\n}\n\n# Et la même en utilisant le nouveau package duckplyr :\nwith_duckplyr &lt;- function() {\n  con &lt;- dbConnect(duckdb())\n  on.exit(dbDisconnect(con, shutdown = TRUE))\n\n  tbl(con, \"read_parquet('geo.parquet')\") |&gt;\n    duckplyr::as_duckdb_tibble() |&gt;\n    duckplyr::compute_parquet(\"my_tbl.parquet\")\n}\n\n#| cache: true\ntimemoir(with_arrow(), \n         with_copy_to(), \n         with_duckplyr()) |&gt;\n  kableExtra::kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfname\nduration\nerror\nstart_mem\nmax_mem\ncpu_user\ncpu_sys\n\n\n\n\nwith_arrow()\n23.445\nNA\n143424\n17829400\n39.312\n9.904\n\n\nwith_copy_to()\n7.181\nNA\n143924\n7156140\n49.321\n5.535\n\n\nwith_duckplyr()\n6.219\nNA\n144556\n7070052\n42.807\n5.835\n\n\n\n\n\n(Sur ma machine) La version duckplyr est quasiment 4 fois plus rapide que la version arrow, à égalité avec la méthode pure duckdb\n\n\n\n\n\n\nInformation de session\n\n\n\n\n\n\ndevtools::session_info()\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.5.1 (2025-06-13)\n os       Ubuntu 24.04.2 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  fr_FR.UTF-8\n ctype    fr_FR.UTF-8\n tz       Europe/Paris\n date     2025-07-13\n pandoc   3.7.0.2 @ /usr/bin/ (via rmarkdown)\n quarto   1.6.42 @ /usr/local/bin/quarto\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package      * version    date (UTC) lib source\n arrow        * 20.0.0.2   2025-05-26 [2] RSPM (R 4.5.0)\n assertthat     0.2.1      2019-03-21 [2] RSPM (R 4.5.0)\n bit            4.6.0      2025-03-06 [2] RSPM (R 4.5.0)\n bit64          4.6.0-1    2025-01-16 [2] RSPM (R 4.5.0)\n cachem         1.1.0      2024-05-16 [2] RSPM (R 4.5.0)\n cli            3.6.5      2025-04-23 [2] RSPM (R 4.5.0)\n codetools      0.2-20     2024-03-31 [3] CRAN (R 4.5.1)\n DBI          * 1.2.3      2024-06-02 [2] RSPM (R 4.5.0)\n devtools       2.4.5      2022-10-11 [2] RSPM (R 4.5.0)\n dichromat      2.0-0.1    2022-05-02 [2] RSPM (R 4.5.0)\n digest         0.6.37     2024-08-19 [2] RSPM (R 4.5.0)\n dplyr        * 1.1.4      2023-11-17 [2] RSPM (R 4.5.0)\n duckdb       * 1.3.1      2025-06-23 [1] RSPM (R 4.5.0)\n ellipsis       0.3.2      2021-04-29 [2] RSPM (R 4.5.0)\n evaluate       1.0.3      2025-01-10 [2] RSPM (R 4.5.0)\n farver         2.1.2      2024-05-13 [2] RSPM (R 4.5.0)\n fastmap        1.2.0      2024-05-15 [2] RSPM (R 4.5.0)\n fs             1.6.6      2025-04-12 [2] RSPM (R 4.5.0)\n generics       0.1.4      2025-05-09 [2] RSPM (R 4.5.0)\n glue           1.8.0      2024-09-30 [2] RSPM (R 4.5.0)\n gt           * 1.0.0      2025-04-05 [1] RSPM (R 4.5.0)\n htmltools      0.5.8.1    2024-04-04 [1] RSPM (R 4.5.0)\n htmlwidgets    1.6.4      2023-12-06 [2] RSPM (R 4.5.0)\n httpuv         1.6.16     2025-04-16 [2] RSPM (R 4.5.0)\n jsonlite       2.0.0      2025-03-27 [2] RSPM (R 4.5.0)\n kableExtra   * 1.4.0      2024-01-24 [1] RSPM (R 4.5.0)\n knitr          1.50       2025-03-16 [2] RSPM (R 4.5.0)\n later          1.4.2      2025-04-08 [2] RSPM (R 4.5.0)\n lifecycle      1.0.4      2023-11-07 [2] RSPM (R 4.5.0)\n magrittr       2.0.3      2022-03-30 [2] RSPM (R 4.5.0)\n memoise        2.0.1      2021-11-26 [2] RSPM (R 4.5.0)\n mime           0.13       2025-03-17 [2] RSPM (R 4.5.0)\n miniUI         0.1.2      2025-04-17 [2] RSPM (R 4.5.0)\n pillar         1.11.0     2025-07-04 [1] RSPM (R 4.5.0)\n pkgbuild       1.4.8      2025-05-26 [2] RSPM (R 4.5.0)\n pkgconfig      2.0.3      2019-09-22 [2] RSPM (R 4.5.0)\n pkgload        1.4.0      2024-06-28 [2] RSPM (R 4.5.0)\n profvis        0.4.0      2024-09-20 [2] RSPM (R 4.5.0)\n promises       1.3.3      2025-05-29 [2] RSPM (R 4.5.0)\n ps             1.9.1      2025-04-12 [2] RSPM (R 4.5.0)\n purrr          1.0.4      2025-02-05 [2] RSPM (R 4.5.0)\n R6             2.6.1      2025-02-15 [2] RSPM (R 4.5.0)\n RColorBrewer   1.1-3      2022-04-03 [2] RSPM (R 4.5.0)\n Rcpp           1.0.14     2025-01-12 [2] RSPM (R 4.5.0)\n remotes        2.5.0      2024-03-17 [2] RSPM (R 4.5.0)\n rlang          1.1.6      2025-04-11 [2] RSPM (R 4.5.0)\n rmarkdown      2.29       2024-11-04 [2] RSPM (R 4.5.0)\n rstudioapi     0.17.1     2024-10-22 [2] RSPM (R 4.5.0)\n scales         1.4.0      2025-04-24 [2] RSPM (R 4.5.0)\n sessioninfo    1.2.3      2025-02-05 [2] RSPM (R 4.5.0)\n shiny          1.10.0     2024-12-14 [2] RSPM (R 4.5.0)\n stringi        1.8.7      2025-03-27 [2] RSPM (R 4.5.0)\n stringr        1.5.1      2023-11-14 [2] RSPM (R 4.5.0)\n svglite        2.2.1      2025-05-12 [2] RSPM (R 4.5.0)\n systemfonts    1.2.3      2025-04-30 [2] RSPM (R 4.5.0)\n textshaping    1.0.1      2025-05-01 [2] RSPM (R 4.5.0)\n tibble         3.3.0      2025-06-08 [2] RSPM (R 4.5.0)\n tidyselect     1.2.1      2024-03-11 [2] RSPM (R 4.5.0)\n timemoir     * 0.6.0.9000 2025-07-12 [1] Github (nbc/timemoir@2db402e)\n urlchecker     1.0.1      2021-11-30 [2] RSPM (R 4.5.0)\n usethis        3.1.0      2024-11-26 [2] RSPM (R 4.5.0)\n vctrs          0.6.5      2023-12-01 [2] RSPM (R 4.5.0)\n viridisLite    0.4.2      2023-05-02 [2] RSPM (R 4.5.0)\n xfun           0.52       2025-04-02 [2] RSPM (R 4.5.0)\n xml2           1.3.8      2025-03-14 [2] RSPM (R 4.5.0)\n xtable         1.8-4      2019-04-21 [2] RSPM (R 4.5.0)\n yaml           2.3.10     2024-07-26 [2] RSPM (R 4.5.0)\n\n [1] /home/nc/R/x86_64-pc-linux-gnu-library/4.5.1-noble\n [2] /usr/local/lib/R/site-library\n [3] /usr/local/lib/R/library\n * ── Packages attached to the search path.\n\n──────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "posts/2025-07-10-st_as_sf/index.html",
    "href": "posts/2025-07-10-st_as_sf/index.html",
    "title": "de duckdb à st_to_sf",
    "section": "",
    "text": "Jusqu’à maintenant, générer un dataframe SF à partir d’une requête duckdb imposait :\n\nd’utiliser ST_AsWKB ou ST_AsText sur la colonne géométrie\nde matérialiser les données pour les transférer à sf::st_as_sf\n\nAvec les versions récentes de duckdb, de l’extension spatial et du package geoarrow, vous pouvez lui demander de générer une donnée réutilisable directement par {geoarrow} :\nlibrary(duckdb)\nlibrary(geoarrow)\nlibrary(sf)\nlibrary(dplyr)\n\ncon &lt;- dbConnect(duckdb())\ndbExecute(con, \"LOAD spatial;\")\ndbExecute(con, \"CALL register_geoarrow_extensions()\")\n\ndplyr::tbl(con, sql(\"SELECT geometry FROM read_parquet('~/etude-duckdb-sig/geo.parquet') LIMIT 5\")) |&gt;\n  arrow::to_arrow() |&gt;\n  st_as_sf(crs=st_crs(2154))\nEt c’est beaucoup plus rapide que toutes les autres méthodes (résultat du script ci-dessous) :\n# A tibble: 4 × 5\n  fname                    duration error start_mem  max_mem\n  &lt;chr&gt;                       &lt;dbl&gt; &lt;chr&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 with_register_geoarrow()     46.0 NA       338468 25641244\n2 with_st_read()              402.  NA       338388 24356248\n3 with_get_query_aswkb()      423.  NA       338472 24856088\n4 with_get_query_astxt()      211.  NA       338580 24330400\n\nlibrary(arrow)\nlibrary(duckdb)\nlibrary(sf)\nlibrary(dplyr)\nlibrary(timemoir)\n\nsample_size &lt;- 1e8\n\nif (!file.exists(\"geo.parquet\")) {\n  download.file(\"https://static.data.gouv.fr/resources/sirene-geolocalise-parquet/20240107-143656/sirene2024-geo.parquet\", \"geo.parquet\")\n}\n\nwith_register_geoarrow &lt;- function() {\n  library(geoarrow)\n  \n  conn_ddb &lt;- dbConnect(duckdb())\n  dbExecute(conn_ddb, \"INSTALL spatial;\")\n  dbExecute(conn_ddb, \"LOAD spatial;\")\n  dbExecute(conn_ddb, \"CALL register_geoarrow_extensions()\")\n  \n  query &lt;- dplyr::tbl(conn_ddb, sql(glue(\"SELECT * FROM read_parquet('geo.parquet') LIMIT {sample_size}\"))) |&gt;\n    arrow::to_arrow() |&gt;\n    st_as_sf(crs=st_crs(2154))\n  \n  dbDisconnect(conn_ddb, shutdown = TRUE)\n}\n\nwith_st_read &lt;- function() {\n  conn_ddb &lt;- dbConnect(duckdb())\n  dbExecute(conn_ddb, \"INSTALL spatial;\")\n  dbExecute(conn_ddb, \"LOAD spatial;\")\n  \n  a &lt;- st_read(\n    conn_ddb, \n    query=glue(\n      \"SELECT * REPLACE(geometry.ST_ASWKB() AS geometry) FROM read_parquet('geo.parquet') \n      WHERE geometry IS NOT NULL LIMIT {sample_size}\"\n    ), \n    geometry_column = \"geometry\") |&gt;\n    st_set_crs(2154)\n  dbDisconnect(conn_ddb, shutdown = TRUE)\n}\n\nwith_get_query_aswkb &lt;- function() {\n  conn_ddb &lt;- dbConnect(duckdb())\n  dbExecute(conn_ddb, \"INSTALL spatial;\")\n  dbExecute(conn_ddb, \"LOAD spatial;\")\n  \n  query &lt;- dbGetQuery(\n    conn_ddb, \n    glue(\n      \"\n      SELECT * REPLACE(geometry.ST_ASWKB() AS geometry) FROM read_parquet('geo.parquet') \n      WHERE geometry IS NOT NULL LIMIT {sample_size}\n      \"\n    )\n  ) |&gt;\n    sf::st_as_sf(crs = st_crs(2154))\n  dbDisconnect(conn_ddb, shutdown = TRUE)\n}\n\nwith_get_query_astxt &lt;- function() {\n  conn_ddb &lt;- dbConnect(duckdb())\n  dbExecute(conn_ddb, \"INSTALL spatial;\")\n  dbExecute(conn_ddb, \"LOAD spatial;\")\n  \n  query &lt;- dbGetQuery(\n    conn_ddb, \n    glue(\n      \"\n      SELECT * REPLACE(geometry.ST_ASText() AS geometry) FROM read_parquet('geo.parquet')\n      WHERE geometry IS NOT NULL LIMIT {sample_size}\n      \"\n    )\n  ) |&gt;\n    sf::st_as_sf(wkt = \"geometry\", crs = st_crs(2154))\n  dbDisconnect(conn_ddb, shutdown = TRUE)\n}\n\nres &lt;- timemoir(\n  with_register_geoarrow(), \n  with_st_read(),\n  with_get_query_aswkb(),\n  with_get_query_astxt()) |&gt;\n  gt()\n\nSource"
  },
  {
    "objectID": "posts/2025-07-10-to_arrow_bad/index.html#environnement",
    "href": "posts/2025-07-10-to_arrow_bad/index.html#environnement",
    "title": "to arrow bad/duckplyr good",
    "section": "Environnement",
    "text": "Environnement\n\n\nCode\ndevtools::session_info()\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.5.1 (2025-06-13)\n os       Ubuntu 24.04.2 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  fr_FR.UTF-8\n ctype    fr_FR.UTF-8\n tz       Europe/Paris\n date     2025-07-13\n pandoc   3.7.0.2 @ /usr/bin/ (via rmarkdown)\n quarto   1.6.42 @ /usr/local/bin/quarto\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n cachem        1.1.0   2024-05-16 [2] RSPM (R 4.5.0)\n cli           3.6.5   2025-04-23 [2] RSPM (R 4.5.0)\n devtools      2.4.5   2022-10-11 [2] RSPM (R 4.5.0)\n digest        0.6.37  2024-08-19 [2] RSPM (R 4.5.0)\n ellipsis      0.3.2   2021-04-29 [2] RSPM (R 4.5.0)\n evaluate      1.0.3   2025-01-10 [2] RSPM (R 4.5.0)\n fastmap       1.2.0   2024-05-15 [2] RSPM (R 4.5.0)\n fs            1.6.6   2025-04-12 [2] RSPM (R 4.5.0)\n glue          1.8.0   2024-09-30 [2] RSPM (R 4.5.0)\n htmltools     0.5.8.1 2024-04-04 [1] RSPM (R 4.5.0)\n htmlwidgets   1.6.4   2023-12-06 [2] RSPM (R 4.5.0)\n httpuv        1.6.16  2025-04-16 [2] RSPM (R 4.5.0)\n jsonlite      2.0.0   2025-03-27 [2] RSPM (R 4.5.0)\n knitr         1.50    2025-03-16 [2] RSPM (R 4.5.0)\n later         1.4.2   2025-04-08 [2] RSPM (R 4.5.0)\n lifecycle     1.0.4   2023-11-07 [2] RSPM (R 4.5.0)\n magrittr      2.0.3   2022-03-30 [2] RSPM (R 4.5.0)\n memoise       2.0.1   2021-11-26 [2] RSPM (R 4.5.0)\n mime          0.13    2025-03-17 [2] RSPM (R 4.5.0)\n miniUI        0.1.2   2025-04-17 [2] RSPM (R 4.5.0)\n pkgbuild      1.4.8   2025-05-26 [2] RSPM (R 4.5.0)\n pkgload       1.4.0   2024-06-28 [2] RSPM (R 4.5.0)\n profvis       0.4.0   2024-09-20 [2] RSPM (R 4.5.0)\n promises      1.3.3   2025-05-29 [2] RSPM (R 4.5.0)\n purrr         1.0.4   2025-02-05 [2] RSPM (R 4.5.0)\n R6            2.6.1   2025-02-15 [2] RSPM (R 4.5.0)\n Rcpp          1.0.14  2025-01-12 [2] RSPM (R 4.5.0)\n remotes       2.5.0   2024-03-17 [2] RSPM (R 4.5.0)\n rlang         1.1.6   2025-04-11 [2] RSPM (R 4.5.0)\n rmarkdown     2.29    2024-11-04 [2] RSPM (R 4.5.0)\n rstudioapi    0.17.1  2024-10-22 [2] RSPM (R 4.5.0)\n sessioninfo   1.2.3   2025-02-05 [2] RSPM (R 4.5.0)\n shiny         1.10.0  2024-12-14 [2] RSPM (R 4.5.0)\n urlchecker    1.0.1   2021-11-30 [2] RSPM (R 4.5.0)\n usethis       3.1.0   2024-11-26 [2] RSPM (R 4.5.0)\n vctrs         0.6.5   2023-12-01 [2] RSPM (R 4.5.0)\n xfun          0.52    2025-04-02 [2] RSPM (R 4.5.0)\n xtable        1.8-4   2019-04-21 [2] RSPM (R 4.5.0)\n yaml          2.3.10  2024-07-26 [2] RSPM (R 4.5.0)\n\n [1] /home/nc/R/x86_64-pc-linux-gnu-library/4.5.1-noble\n [2] /usr/local/lib/R/site-library\n [3] /usr/local/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "posts/2025-07-10-benchmark/index.html",
    "href": "posts/2025-07-10-benchmark/index.html",
    "title": "Comparer des performances DuckDB/arrow",
    "section": "",
    "text": "Quand il s’agit de comparer des façons de faire, l’idéal est de lancer le code dans des outils de benchmarks mais les outils “classiques” de R ne sont pas adaptés à la comparaison de code duckdb et/ou arrow :\n\ntictoc ne retourne que le temps\nbench ne voit pas les allocations mémoires de duckdb et arrow\n…\n\nDans mes articles, j’utiliserais régulièrement timemoir écrit exprès pour ce genre de comparatifs :\n\nlibrary(timemoir)\n\ntest_function &lt;- function(n) {\n  x &lt;- rnorm(n); mean(x)\n}\n\ntimemoir(\n  test_function(1e3),\n  test_function(1e6),\n  test_function(1e8)\n) |&gt; \n  kableExtra::kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\nfname\nduration\nerror\nstart_mem\nmax_mem\ncpu_user\ncpu_sys\n\n\n\n\ntest_function(1000)\n0.000\nNA\n110936\n111192\n0.000\n0.000\n\n\ntest_function(1e+06)\n0.027\nNA\n110808\n110168\n0.026\n0.000\n\n\ntest_function(1e+08)\n2.625\nNA\n110808\n893144\n2.355\n0.269\n\n\n\n\n\n\nCela dit il ne s’agit pas de “vrais” benchmarks rigoureux, bien au delà des objectifs de ce blog mais de comparaisons rapides, destinées à se faire une idée approximative des performances relatives.\n\n\n\nReuseCC BY 4.0"
  }
]