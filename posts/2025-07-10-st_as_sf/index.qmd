---
title: "de duckdb à st_to_sf"
description: "Comment convertir une extraction de duckdb en objet `sf`"
date: 2025-07-12
categories: [R, duckdb, arrow, sf, geoarrow]
image: https://duckdb.org/images/logo-dl/DuckDB_Logo-horizontal.svg
draft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!
---

Jusqu'à récemment, générer un dataframe SF à partir d'une requête duckdb imposait :

1. d'utiliser `ST_AsWKB` ou `ST_AsText` sur la colonne géométrie
2. de matérialiser les données pour les transférer à `sf::st_as_sf`

Avec les versions récentes de duckdb, de l'extension spatial et du package geoarrow, vous pouvez lui demander de générer une donnée réutilisable directement par `geoarrow` : 

```{r}
#| label: example
#| warning: false
library(geoarrow)
library(duckdb)
library(sf)

con <- dbConnect(duckdb())

url <- "https://static.data.gouv.fr/resources/sirene-geolocalise-parquet/20240107-143656/sirene2024-geo.parquet"

x <- dbExecute(con, "LOAD spatial;")
x <- dbExecute(con, "LOAD httpfs;")
x <- dbExecute(con, "CALL register_geoarrow_extensions()") # <1>

dplyr::tbl(con, dplyr::sql(glue::glue("SELECT geometry 
                                       FROM read_parquet('{url}')
                                       LIMIT 5"))) |> # <2>
  arrow::to_arrow() |> # <3>
  st_as_sf(crs=st_crs(2154)) # <4>
```

1. demande à duckdb spatial d'ajouter les métadonnées geoarrow dans les colonnes de type géométrie
2. grace à la commande précédente, cette ligne va retourner des géométries lisibles par geoarrow
3. cette ligne transforme l'objet en un objet arrow
4. geoarrow surcharge la fonction `st_as_sf` pour qu'elle puisse lire directement l'objet arrow

## Une comparaison rapide

Et c'est **beaucoup** plus rapide que toutes les autres méthodes : 


```{r}
#| label: benchmark
#| warning: false
#| output: false
#| code-fold: true
#| code-summary: "Montre moi le code du benchmark"
#| cache: true

library(arrow)
library(duckdb)
library(sf)
library(dplyr)
library(glue)
library(timemoir)
library(geoarrow)

sample_size <- 1e8

if (!file.exists("geo.parquet")) {
  download.file("https://static.data.gouv.fr/resources/sirene-geolocalise-parquet/20240107-143656/sirene2024-geo.parquet", "geo.parquet")
}

with_register_geoarrow <- function() {
  conn_ddb <- dbConnect(duckdb())
  dbExecute(conn_ddb, "LOAD spatial;")
  dbExecute(conn_ddb, "CALL register_geoarrow_extensions()")
  
  query <- dplyr::tbl(conn_ddb, sql(glue("SELECT * FROM read_parquet('geo.parquet') LIMIT {sample_size}"))) |>
    arrow::to_arrow() |>
    st_as_sf(crs=st_crs(2154))
  
  dbDisconnect(conn_ddb, shutdown = TRUE)
}

with_st_read <- function() {
  conn_ddb <- dbConnect(duckdb())
  on.exit(dbDisconnect(conn_ddb, shutdown = TRUE))
  dbExecute(conn_ddb, "LOAD spatial;")
  
  a <- st_read(
    conn_ddb, 
    query=glue(
      "SELECT * REPLACE(geometry.ST_ASWKB() AS geometry) FROM read_parquet('geo.parquet') 
      WHERE geometry IS NOT NULL LIMIT {sample_size}"
    ), 
    geometry_column = "geometry") |>
    st_set_crs(2154)
  dbDisconnect(conn_ddb, shutdown = TRUE)
}

with_get_query_aswkb <- function() {
  conn_ddb <- dbConnect(duckdb())
  on.exit(dbDisconnect(conn_ddb, shutdown = TRUE))
  dbExecute(conn_ddb, "LOAD spatial;")
  
  query <- dbGetQuery(
    conn_ddb, 
    glue(
      "
      SELECT * REPLACE(geometry.ST_ASWKB() AS geometry) FROM read_parquet('geo.parquet') 
      WHERE geometry IS NOT NULL LIMIT {sample_size}
      "
    )
  ) |>
    sf::st_as_sf(crs = st_crs(2154))
  dbDisconnect(conn_ddb, shutdown = TRUE)
}

with_get_query_astxt <- function() {
  conn_ddb <- dbConnect(duckdb())
  on.exit(dbDisconnect(conn_ddb, shutdown = TRUE))
  dbExecute(conn_ddb, "LOAD spatial;")
  
  query <- dbGetQuery(
    conn_ddb, 
    glue(
      "
      SELECT * REPLACE(geometry.ST_ASText() AS geometry) FROM read_parquet('geo.parquet')
      WHERE geometry IS NOT NULL LIMIT {sample_size}
      "
    )
  ) |>
    sf::st_as_sf(wkt = "geometry", crs = st_crs(2154))
}
```

```{r}
#| label: output_benchmark
#| cache: true
res <- timemoir(
  with_register_geoarrow(), 
  with_st_read(),
  with_get_query_aswkb(),
  with_get_query_astxt())

res |>
  kableExtra::kable()

plot(res)
```

## Quelques liens

On ne trouve pas grand chose sur cette commande 

* [Un webinaire du R consortium](https://youtu.be/tjNEoIYr_ag?t=1641)
* [Un ticket de geoarrow](https://github.com/duckdb/duckdb-spatial/issues/589)

::: {.callout-note collapse=true}
## Information de session
```{r}
#| label: session_info
devtools::session_info(pkgs = "attached")
```
:::