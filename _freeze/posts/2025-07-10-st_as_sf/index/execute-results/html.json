{
  "hash": "1b5ff9095e602bfcba3fa4029602126a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"de duckdb à st_to_sf\"\ndescription: \"Comment convertir une extraction de duckdb en objet sf`\"\ndate: 07-10-2025\ncategories: [duckdb, arrow, sf, geoarrow]\nimage: https://duckdb.org/images/logo-dl/DuckDB_Logo-horizontal.svg\ndraft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!\n---\n\n\n\nJusqu'à maintenant, générer un dataframe SF à partir d'une requête duckdb imposait :\n\n1. d'utiliser `ST_AsWKB` ou `ST_AsText` sur la colonne géométrie\n2. de matérialiser les données pour les transférer à `sf::st_as_sf`\n\nAvec les versions récentes de duckdb, de l'extension spatial et du package geoarrow, vous pouvez lui demander de générer une donnée réutilisable directement par {geoarrow} : \n\n``` r\nlibrary(duckdb)\nlibrary(geoarrow)\nlibrary(sf)\nlibrary(dplyr)\n\ncon <- dbConnect(duckdb())\ndbExecute(con, \"LOAD spatial;\")\ndbExecute(con, \"CALL register_geoarrow_extensions()\")\n\ndplyr::tbl(con, sql(\"SELECT geometry FROM read_parquet('~/etude-duckdb-sig/geo.parquet') LIMIT 5\")) |>\n  arrow::to_arrow() |>\n  st_as_sf(crs=st_crs(2154))\n```\n\nEt c'est **beaucoup** plus rapide que toutes les autres méthodes (résultat du script ci-dessous) : \n\n```\n# A tibble: 4 × 5\n  fname                    duration error start_mem  max_mem\n  <chr>                       <dbl> <chr>     <dbl>    <dbl>\n1 with_register_geoarrow()     46.0 NA       338468 25641244\n2 with_st_read()              402.  NA       338388 24356248\n3 with_get_query_aswkb()      423.  NA       338472 24856088\n4 with_get_query_astxt()      211.  NA       338580 24330400\n```\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(arrow)\nlibrary(duckdb)\nlibrary(sf)\nlibrary(dplyr)\nlibrary(timemoir)\n\nsample_size <- 1e8\n\nif (!file.exists(\"geo.parquet\")) {\n  download.file(\"https://static.data.gouv.fr/resources/sirene-geolocalise-parquet/20240107-143656/sirene2024-geo.parquet\", \"geo.parquet\")\n}\n\nwith_register_geoarrow <- function() {\n  library(geoarrow)\n  \n  conn_ddb <- dbConnect(duckdb())\n  dbExecute(conn_ddb, \"INSTALL spatial;\")\n  dbExecute(conn_ddb, \"LOAD spatial;\")\n  dbExecute(conn_ddb, \"CALL register_geoarrow_extensions()\")\n  \n  query <- dplyr::tbl(conn_ddb, sql(glue(\"SELECT * FROM read_parquet('geo.parquet') LIMIT {sample_size}\"))) |>\n    arrow::to_arrow() |>\n    st_as_sf(crs=st_crs(2154))\n  \n  dbDisconnect(conn_ddb, shutdown = TRUE)\n}\n\nwith_st_read <- function() {\n  conn_ddb <- dbConnect(duckdb())\n  dbExecute(conn_ddb, \"INSTALL spatial;\")\n  dbExecute(conn_ddb, \"LOAD spatial;\")\n  \n  a <- st_read(\n    conn_ddb, \n    query=glue(\n      \"SELECT * REPLACE(geometry.ST_ASWKB() AS geometry) FROM read_parquet('geo.parquet') \n      WHERE geometry IS NOT NULL LIMIT {sample_size}\"\n    ), \n    geometry_column = \"geometry\") |>\n    st_set_crs(2154)\n  dbDisconnect(conn_ddb, shutdown = TRUE)\n}\n\nwith_get_query_aswkb <- function() {\n  conn_ddb <- dbConnect(duckdb())\n  dbExecute(conn_ddb, \"INSTALL spatial;\")\n  dbExecute(conn_ddb, \"LOAD spatial;\")\n  \n  query <- dbGetQuery(\n    conn_ddb, \n    glue(\n      \"\n      SELECT * REPLACE(geometry.ST_ASWKB() AS geometry) FROM read_parquet('geo.parquet') \n      WHERE geometry IS NOT NULL LIMIT {sample_size}\n      \"\n    )\n  ) |>\n    sf::st_as_sf(crs = st_crs(2154))\n  dbDisconnect(conn_ddb, shutdown = TRUE)\n}\n\nwith_get_query_astxt <- function() {\n  conn_ddb <- dbConnect(duckdb())\n  dbExecute(conn_ddb, \"INSTALL spatial;\")\n  dbExecute(conn_ddb, \"LOAD spatial;\")\n  \n  query <- dbGetQuery(\n    conn_ddb, \n    glue(\n      \"\n      SELECT * REPLACE(geometry.ST_ASText() AS geometry) FROM read_parquet('geo.parquet')\n      WHERE geometry IS NOT NULL LIMIT {sample_size}\n      \"\n    )\n  ) |>\n    sf::st_as_sf(wkt = \"geometry\", crs = st_crs(2154))\n  dbDisconnect(conn_ddb, shutdown = TRUE)\n}\n\nres <- timemoir(\n  with_register_geoarrow(), \n  with_st_read(),\n  with_get_query_aswkb(),\n  with_get_query_astxt()) |>\n  gt()\n```\n:::\n\n\n\n[Source](https://youtu.be/tjNEoIYr_ag?t=1641)",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}